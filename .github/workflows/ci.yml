name: CI/CD Pipeline

on:
  push:
    branches: [ master, main, develop ]
  pull_request:
    branches: [ master, main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '20'

jobs:
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: TypeScript build check
      run: bun run build
      
    - name: Type checking
      run: bun run typecheck
      
    - name: ESLint quality check
      run: bun run lint
      
    - name: Run test suite
      run: bun test
      
    - name: Generate coverage report
      run: bun run test:coverage
      
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      if: success()
      with:
        fail_ci_if_error: false
        
    - name: Validate AsyncAPI generation
      run: bun run test:validation
      
    - name: Check package installation
      run: |
        bun pack
        npm pack --dry-run
        
  build-artifacts:
    name: Build Release Artifacts
    runs-on: ubuntu-latest
    needs: quality-gates
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build TypeScript
      run: bun run build
      
    - name: Create npm package
      run: bun pack
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: |
          dist/
          *.tgz
        retention-days: 30

  publish-npm:
    name: Publish to NPM
    runs-on: ubuntu-latest
    needs: [quality-gates, build-artifacts]
    if: github.event_name == 'release' && github.event.action == 'published'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Build for release
      run: bun run build
      
    - name: Setup NPM authentication
      run: |
        echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      env:
        NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        
    - name: Publish to NPM
      run: npm publish
      
    - name: Create GitHub release comment
      uses: actions/github-script@v7
      with:
        script: |
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: 'ðŸš€ **Release Published Successfully!**\n\nPackage: `@larsartmann/typespec-asyncapi@${{ github.event.release.tag_name }}`\n\nInstall: `bun add @larsartmann/typespec-asyncapi`\n\nðŸ“¦ [View on NPM](https://www.npmjs.com/package/@larsartmann/typespec-asyncapi)'
          })

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Bun
      uses: oven-sh/setup-bun@v1
      with:
        bun-version: latest
        
    - name: Install dependencies
      run: bun install --frozen-lockfile
      
    - name: Run security audit
      run: bun audit
      continue-on-error: true
      
    - name: Check for vulnerabilities
      run: |
        echo "Security audit completed"
        # Add additional security checks here if needed