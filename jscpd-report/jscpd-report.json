{
  "statistics": {
    "detectionDate": "2025-08-31T03:20:15.997Z",
    "formats": {
      "typescript": {
        "sources": {
          "src/test/unit/type-definitions.test.ts": {
            "lines": 628,
            "tokens": 4688,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/test/integration/decorator-functionality.test.ts": {
            "lines": 651,
            "tokens": 2641,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/test/integration/asyncapi-generation.test.ts": {
            "lines": 747,
            "tokens": 2476,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 6,
            "duplicatedTokens": 94,
            "percentage": 0.8,
            "percentageTokens": 3.8,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/validation/index.ts": {
            "lines": 26,
            "tokens": 82,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/validation/asyncapi-validator.ts": {
            "lines": 372,
            "tokens": 2506,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 14,
            "duplicatedTokens": 152,
            "percentage": 3.76,
            "percentageTokens": 6.07,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/validation-helpers.ts": {
            "lines": 115,
            "tokens": 826,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/typespec-helpers.ts": {
            "lines": 98,
            "tokens": 685,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 4,
            "duplicatedTokens": 57,
            "percentage": 4.08,
            "percentageTokens": 8.32,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/schema-conversion.ts": {
            "lines": 113,
            "tokens": 898,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/protocol-validation.ts": {
            "lines": 125,
            "tokens": 905,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/utils/asyncapi-helpers.ts": {
            "lines": 157,
            "tokens": 1337,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 29,
            "duplicatedTokens": 252,
            "percentage": 18.47,
            "percentageTokens": 18.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/types/index.ts": {
            "lines": 165,
            "tokens": 627,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/test/protocol-bindings.test.ts": {
            "lines": 123,
            "tokens": 1178,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/metrics.ts": {
            "lines": 417,
            "tokens": 3943,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/memory-monitor.ts": {
            "lines": 585,
            "tokens": 5434,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/ThroughputResult.ts": {
            "lines": 7,
            "tokens": 47,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/PerformanceMetricsService.ts": {
            "lines": 39,
            "tokens": 444,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/PerformanceMeasurement.ts": {
            "lines": 6,
            "tokens": 42,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/MemorySnapshot.ts": {
            "lines": 10,
            "tokens": 63,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/MemoryMonitorService.ts": {
            "lines": 41,
            "tokens": 509,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/MemoryBudget.ts": {
            "lines": 8,
            "tokens": 64,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/MemoryAnalysis.ts": {
            "lines": 9,
            "tokens": 71,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/MeasureOperationMemory.ts": {
            "lines": 5,
            "tokens": 39,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/ForceGarbageCollection.ts": {
            "lines": 5,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/ForceGCResult.ts": {
            "lines": 6,
            "tokens": 52,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/performance/CheckBudgetCompliance.ts": {
            "lines": 5,
            "tokens": 36,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/ThroughputBelowTargetError.ts": {
            "lines": 7,
            "tokens": 75,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/PerformanceError.ts": {
            "lines": 12,
            "tokens": 105,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/MetricsInitializationError.ts": {
            "lines": 5,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/MetricsCollectionError.ts": {
            "lines": 5,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/MemoryThresholdExceededError.ts": {
            "lines": 13,
            "tokens": 113,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/MemoryMonitorInitializationError.ts": {
            "lines": 5,
            "tokens": 43,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/MemoryLeakDetectedError.ts": {
            "lines": 14,
            "tokens": 121,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/GarbageCollectionNotAvailableError.ts": {
            "lines": 10,
            "tokens": 87,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/errors/GarbageCollectionFailureError.ts": {
            "lines": 9,
            "tokens": 96,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/decorators/subscribe.ts": {
            "lines": 27,
            "tokens": 264,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/decorators/server.ts": {
            "lines": 152,
            "tokens": 1514,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/decorators/security.ts": {
            "lines": 357,
            "tokens": 2365,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/decorators/publish.ts": {
            "lines": 25,
            "tokens": 226,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/decorators/protocol.ts": {
            "lines": 242,
            "tokens": 1693,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/decorators/message.ts": {
            "lines": 104,
            "tokens": 588,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/decorators/index.ts": {
            "lines": 33,
            "tokens": 118,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/decorators/channel.ts": {
            "lines": 36,
            "tokens": 316,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/bindings/kafka.ts": {
            "lines": 256,
            "tokens": 1397,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/bindings/index.ts": {
            "lines": 51,
            "tokens": 141,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/protocol-bindings.ts": {
            "lines": 600,
            "tokens": 4462,
            "sources": 1,
            "clones": 2,
            "duplicatedLines": 10,
            "duplicatedTokens": 156,
            "percentage": 1.67,
            "percentageTokens": 3.5,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/path-templates.ts": {
            "lines": 279,
            "tokens": 1514,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/path-templates.test.ts": {
            "lines": 367,
            "tokens": 3038,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/options.ts": {
            "lines": 755,
            "tokens": 5445,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/options.test.ts": {
            "lines": 478,
            "tokens": 3573,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/lib.ts": {
            "lines": 156,
            "tokens": 1071,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/integration-example.ts": {
            "lines": 872,
            "tokens": 7143,
            "sources": 1,
            "clones": 4,
            "duplicatedLines": 24,
            "duplicatedTokens": 356,
            "percentage": 2.75,
            "percentageTokens": 4.98,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/index.ts": {
            "lines": 45,
            "tokens": 244,
            "sources": 1,
            "clones": 0,
            "duplicatedLines": 0,
            "duplicatedTokens": 0,
            "percentage": 0,
            "percentageTokens": 0,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/emitter-with-effect.ts": {
            "lines": 460,
            "tokens": 3887,
            "sources": 1,
            "clones": 1,
            "duplicatedLines": 9,
            "duplicatedTokens": 72,
            "percentage": 1.96,
            "percentageTokens": 1.85,
            "newDuplicatedLines": 0,
            "newClones": 0
          },
          "src/asyncapi-emitter.ts": {
            "lines": 419,
            "tokens": 3063,
            "sources": 1,
            "clones": 3,
            "duplicatedLines": 24,
            "duplicatedTokens": 237,
            "percentage": 5.73,
            "percentageTokens": 7.74,
            "newDuplicatedLines": 0,
            "newClones": 0
          }
        },
        "total": {
          "lines": 10257,
          "tokens": 72417,
          "sources": 54,
          "clones": 9,
          "duplicatedLines": 60,
          "duplicatedTokens": 688,
          "percentage": 0.58,
          "percentageTokens": 0.95,
          "newDuplicatedLines": 0,
          "newClones": 0
        }
      }
    },
    "total": {
      "lines": 10257,
      "tokens": 72417,
      "sources": 54,
      "clones": 9,
      "duplicatedLines": 60,
      "duplicatedTokens": 688,
      "percentage": 0.58,
      "percentageTokens": 0.95,
      "newDuplicatedLines": 0,
      "newClones": 0
    }
  },
  "duplicates": [
    {
      "format": "typescript",
      "lines": 4,
      "fragment": ")\n\t\t\tEffect.log(`📊 Generated ${Object.keys(asyncapiDoc.components.schemas).length} schemas`)\n\t\t\tEffect.log(`📊 Generated ${Object.keys(asyncapiDoc.operations).length} operations`)\n\t\t}",
      "tokens": 0,
      "firstFile": {
        "name": "src/test/integration/asyncapi-generation.test.ts",
        "start": 743,
        "end": 746,
        "startLoc": {
          "line": 743,
          "column": 4,
          "position": 2421
        },
        "endLoc": {
          "line": 746,
          "column": 2,
          "position": 2468
        }
      },
      "secondFile": {
        "name": "src/test/integration/asyncapi-generation.test.ts",
        "start": 359,
        "end": 362,
        "startLoc": {
          "line": 359,
          "column": 70,
          "position": 745
        },
        "endLoc": {
          "line": 362,
          "column": 7,
          "position": 792
        }
      }
    },
    {
      "format": "typescript",
      "lines": 8,
      "fragment": ": string): Promise<{\n\tvalid: boolean;\n\terrors: ValidationError[];\n\twarnings: string[]\n}> {\n\tconst validator = new AsyncAPIValidator({strict: false})\n\tvalidator.initialize()\n\tconst result = await validator.validate",
      "tokens": 0,
      "firstFile": {
        "name": "src/validation/asyncapi-validator.ts",
        "start": 277,
        "end": 284,
        "startLoc": {
          "line": 277,
          "column": 8,
          "position": 1832
        },
        "endLoc": {
          "line": 284,
          "column": 9,
          "position": 1908
        }
      },
      "secondFile": {
        "name": "src/validation/asyncapi-validator.ts",
        "start": 258,
        "end": 265,
        "startLoc": {
          "line": 258,
          "column": 9,
          "position": 1701
        },
        "endLoc": {
          "line": 265,
          "column": 13,
          "position": 1777
        }
      }
    },
    {
      "format": "typescript",
      "lines": 6,
      "fragment": ": {\n\t\ttype?: \"request\" | \"response\";\n\t\tmethod?: \"GET\" | \"POST\" | \"PUT\" | \"PATCH\" | \"DELETE\" | \"HEAD\" | \"OPTIONS\" | \"CONNECT\" | \"TRACE\";\n\t\tquery?: SchemaObject | ReferenceObject;\n\t\tstatusCode?: number;\n\t})",
      "tokens": 0,
      "firstFile": {
        "name": "src/protocol-bindings.ts",
        "start": 256,
        "end": 261,
        "startLoc": {
          "line": 256,
          "column": 7,
          "position": 1774
        },
        "endLoc": {
          "line": 261,
          "column": 2,
          "position": 1852
        }
      },
      "secondFile": {
        "name": "src/protocol-bindings.ts",
        "start": 115,
        "end": 120,
        "startLoc": {
          "line": 115,
          "column": 2,
          "position": 659
        },
        "endLoc": {
          "line": 120,
          "column": 2,
          "position": 737
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "= (context: EmitContext<object>): Effect.Effect<Record<string, unknown>, SpecGenerationError> =>\n\tEffect.gen(function* () {\n\t\tif (!context.program) {\n\t\t\treturn yield* Effect.fail(new SpecGenerationError(\"TypeSpec program context missing\", {} as AsyncAPIEmitterOptions))\n\t\t}\n\n\t\tconst operations",
      "tokens": 0,
      "firstFile": {
        "name": "src/integration-example.ts",
        "start": 243,
        "end": 249,
        "startLoc": {
          "line": 243,
          "column": 2,
          "position": 2073
        },
        "endLoc": {
          "line": 249,
          "column": 11,
          "position": 2162
        }
      },
      "secondFile": {
        "name": "src/integration-example.ts",
        "start": 182,
        "end": 188,
        "startLoc": {
          "line": 182,
          "column": 2,
          "position": 1520
        },
        "endLoc": {
          "line": 188,
          "column": 9,
          "position": 1609
        }
      }
    },
    {
      "format": "typescript",
      "lines": 7,
      "fragment": "= (context: EmitContext<object>): Effect.Effect<Record<string, unknown>, SpecGenerationError> =>\n\tEffect.gen(function* () {\n\t\tif (!context.program) {\n\t\t\treturn yield* Effect.fail(new SpecGenerationError(\"TypeSpec program context missing\", {} as AsyncAPIEmitterOptions))\n\t\t}\n\n\t\tconst components",
      "tokens": 0,
      "firstFile": {
        "name": "src/integration-example.ts",
        "start": 299,
        "end": 305,
        "startLoc": {
          "line": 299,
          "column": 2,
          "position": 2583
        },
        "endLoc": {
          "line": 305,
          "column": 11,
          "position": 2672
        }
      },
      "secondFile": {
        "name": "src/integration-example.ts",
        "start": 182,
        "end": 188,
        "startLoc": {
          "line": 182,
          "column": 2,
          "position": 1520
        },
        "endLoc": {
          "line": 188,
          "column": 9,
          "position": 1609
        }
      }
    },
    {
      "format": "typescript",
      "lines": 10,
      "fragment": ",\n\t\t\t\t\t\tdescription: getDoc(program, op) ?? `Channel for ${op.name}`,\n\t\t\t\t\t\tmessages: {\n\t\t\t\t\t\t\t[`${op.name}Message`]: {\n\t\t\t\t\t\t\t\t$ref: `#/components/messages/${op.name}Message`,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t},\n\t\t\t\t\t}\n\n\t\t\t\t\t// Add operation (ensure operations object exists)",
      "tokens": 0,
      "firstFile": {
        "name": "src/emitter-with-effect.ts",
        "start": 233,
        "end": 242,
        "startLoc": {
          "line": 233,
          "column": 12,
          "position": 1875
        },
        "endLoc": {
          "line": 242,
          "column": 51,
          "position": 1947
        }
      },
      "secondFile": {
        "name": "src/utils/asyncapi-helpers.ts",
        "start": 45,
        "end": 54,
        "startLoc": {
          "line": 45,
          "column": 2,
          "position": 345
        },
        "endLoc": {
          "line": 54,
          "column": 7,
          "position": 417
        }
      }
    },
    {
      "format": "typescript",
      "lines": 5,
      "fragment": "logOperationDetails(operation: Operation, program: Program): void {\n\t\tEffect.log(`  - Return type: ${operation.returnType.kind}`)\n\t\tEffect.log(`  - Parameters: ${operation.parameters.properties.size}`)\n\n\t\tconst doc",
      "tokens": 0,
      "firstFile": {
        "name": "src/asyncapi-emitter.ts",
        "start": 111,
        "end": 115,
        "startLoc": {
          "line": 111,
          "column": 2,
          "position": 874
        },
        "endLoc": {
          "line": 115,
          "column": 4,
          "position": 931
        }
      },
      "secondFile": {
        "name": "src/utils/typespec-helpers.ts",
        "start": 81,
        "end": 85,
        "startLoc": {
          "line": 81,
          "column": 2,
          "position": 506
        },
        "endLoc": {
          "line": 85,
          "column": 14,
          "position": 563
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": "const definition: ChannelObject = {\n\t\t\taddress: channelPath ?? `/${op.name.toLowerCase()}`,\n\t\t\tdescription: getDoc(program, op) ?? `Channel for ${op.name}`,\n\t\t\tmessages: {\n\t\t\t\t[`${op.name}Message`]: {\n\t\t\t\t\t$ref: `#/components/messages/${op.name}Message`,\n\t\t\t\t},\n\t\t\t},\n\t\t}\n\n\t\t// Add Kafka bindings if channel path looks like a Kafka topic",
      "tokens": 0,
      "firstFile": {
        "name": "src/asyncapi-emitter.ts",
        "start": 148,
        "end": 158,
        "startLoc": {
          "line": 148,
          "column": 3,
          "position": 1282
        },
        "endLoc": {
          "line": 158,
          "column": 63,
          "position": 1385
        }
      },
      "secondFile": {
        "name": "src/utils/asyncapi-helpers.ts",
        "start": 44,
        "end": 54,
        "startLoc": {
          "line": 44,
          "column": 2,
          "position": 314
        },
        "endLoc": {
          "line": 54,
          "column": 7,
          "position": 417
        }
      }
    },
    {
      "format": "typescript",
      "lines": 11,
      "fragment": ")\n\n\t\treturn {\n\t\t\taction,\n\t\t\tchannel: {$ref: `#/channels/${channelName}`},\n\t\t\tsummary: getDoc(program, op) ?? `Operation ${op.name}`,\n\t\t\tdescription: `Generated from TypeSpec operation with ${op.parameters.properties.size} parameters`,\n\t\t}\n\t}\n\n\tprivate",
      "tokens": 0,
      "firstFile": {
        "name": "src/asyncapi-emitter.ts",
        "start": 200,
        "end": 210,
        "startLoc": {
          "line": 200,
          "column": 2,
          "position": 1789
        },
        "endLoc": {
          "line": 210,
          "column": 8,
          "position": 1866
        }
      },
      "secondFile": {
        "name": "src/utils/asyncapi-helpers.ts",
        "start": 63,
        "end": 76,
        "startLoc": {
          "line": 63,
          "column": 14,
          "position": 488
        },
        "endLoc": {
          "line": 76,
          "column": 4,
          "position": 563
        }
      }
    }
  ]
}